package edu.gatech.seclass.project2;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class PurchasesMySQLiteHelper extends SQLiteOpenHelper{
	   // Database Version
    private static final int DATABASE_VERSION = 1;
    // Database Name
    private static final String DATABASE_NAME = "salesDB";
 
    public PurchasesMySQLiteHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION); 
    }
 
    @Override
    public void onCreate(SQLiteDatabase db) {
        // SQL statement to create sales table
        String CREATE_SALES_TABLE = "CREATE TABLE sales ( " +
                "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                "flavor TEXT, "+
                "category TEXT, "+ //yogurt or icecream
                "saletype TEXT, "+ //sale or preorder
                "price TEXT, "+
                "date TEXT, "+
                "vipid TEXT )";
 
        // create sales table
        db.execSQL(CREATE_SALES_TABLE);
    }
 
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS sales");
        // create fresh sales table
        this.onCreate(db);
    }
     
    private static final String TABLE_SALES = "sales";
 
    // sales Table Columns names
    private static final String KEY_ID = "id";
    private static final String KEY_FLAVOR = "flavor";
    private static final String KEY_CATEGORY = "category";
    private static final String KEY_SALETYPE = "saletype";
    private static final String KEY_PRICE = "price";
    private static final String KEY_DATE = "date";
    private static final String KEY_VIPID = "vipid";
    
    private static final String[] COLUMNS = {KEY_ID,KEY_FLAVOR, KEY_CATEGORY, KEY_SALETYPE, KEY_PRICE, KEY_DATE, KEY_VIPID};
     
    public void addSale(Sale sale){
        SQLiteDatabase db = this.getWritableDatabase(); //get reference to writable DB 
        ContentValues values = new ContentValues();
        values.put(KEY_FLAVOR, item.getFlavor()); 
        values.put(KEY_CATEGORY, item.getCategory()); 
        values.put(KEY_SALETYPE, item.getSaleType()); 
        values.put(KEY_DATE, item.getDate());
        values.put(KEY_VIPID, item.getVIPID());
        // 3. insert
        db.insert(TABLE_SALES, // table
                null, //nullColumnHack
                values); // key/value -> keys = column names/ values = column values
 
        // 4. close
        db.close();
    }
 
    public Purchase getOrder(int id){
 
        //get reference to readable DB
        SQLiteDatabase db = this.getReadableDatabase();
 
        //build query
        Cursor cursor =
                db.query(TABLE_SALES, // a. table
                COLUMNS, // b. column names
                " id = ?", // c. selections
                new String[] { String.valueOf(id) }, // d. selections args
                null, // e. group by
                null, // f. having
                null, // g. order by
                null); // h. limit
 
        //if we got results get the first one
        if (cursor != null)
            cursor.moveToFirst();
 
        //build sale object
        Sale sale = new Sale();
        //ID
        //Flavor
        //Category 
        //Saletype
        //date
        //vipid
        //
        //ID Integer.parseInt(cursor.getString(0))); //ID
        //flavor (cursor.getString(0))); //Flavor
        //category (cursor.getString(2));   //Category
        //price Integer.parseInt(cursor.getString(3));     //Price
      
        return sale;
    }
    public List<Sale> getPreorders() {
        List<Sale> sales = new LinkedList<Sale>();
 
        String query = "SELECT  * FROM " + TABLE_SALES;
        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(query, null);
 
        //go over each row, build item and add it to list
        Sale sale = null;
        if (cursor.moveToFirst()) {
            do {
                sale = new Sale();
                //check to see if its a preorder
                ////ID
                //Flavor
                //Category 
                //Saletype
                //date
                //vipid
                //
                //ID Integer.parseInt(cursor.getString(0))); //ID
                //flavor (cursor.getString(0))); //Flavor
                //category (cursor.getString(2));   //Category
                //price Integer.parseInt(cursor.getString(3));     //Price
    
                sales.add(sale);
            } while (cursor.moveToNext());
        }
 
        // return sales
        return sales;
    }
    public List<Sale> getPurchases() {
        List<Sale> sales = new LinkedList<Sale>();
 
        String query = "SELECT  * FROM " + TABLE_SALES;
        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(query, null);
 
        //go over each row, build item and add it to list
        Sale sale = null;
        if (cursor.moveToFirst()) {
            do {
                sale = new Sale();
                //check to see if its a preorder
                ////ID
                //Flavor
                //Category 
                //Saletype
                //date
                //vipid
                //
                //ID Integer.parseInt(cursor.getString(0))); //ID
                //flavor (cursor.getString(0))); //Flavor
                //category (cursor.getString(2));   //Category
                //price Integer.parseInt(cursor.getString(3));     //Price
    
                sales.add(sale);
            } while (cursor.moveToNext());
        }
 
        // return sales
        return sales;
    }
 
    public void deleteSale(Sale sale) {
        SQLiteDatabase db = this.getWritableDatabase();
        db.delete(TABLE_SALES,
                KEY_ID+" = ?",
                new String[] { String.valueOf(sale.getID()) });
        db.close();
    }
}
